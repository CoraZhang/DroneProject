#!/usr/bin/python

import os
import sys
import time
import requests

if len(sys.argv) != 4:
    print "ERROR: Require sensor data to post."
    print "Sensor data order: Temperature Is_Open Is_Tilted"
    sys.exit(1)

def post_data(sensor_id, sensor_value, gateway_id):
    
    # From the APP IoT Gateway ticket.
    httpSAS = 'SharedAccessSignature sr=https%3a%2f%2feappiotsens.servicebus.windows.net%2fdatacollectoroutbox%2fpublishers%2ffffb8fc8-6eae-4368-86c2-6eb75c3ff015%2fmessages&sig=jCs12Zn4hYYHZmaPN8wjVLmawTJJnombeD4MKMgQ2X8%3d&se=4632434417&skn=SendAccessPolicy'

    #
    # Convert seconds since the Epoch to a date/time: datetime.datetime.fromtimestamp(1172969203)
    # Convert date/time to seconds since the Epoch: now = datetime.datetime.fromtimestamp(1172969203); now.strftime("%s")
    #
    time_now = int(time.time()*1000.0)
    sensor_data = '[{"id":"%s","v":[{"m":[%s],"t":%d}]}]' % (sensor_id, sensor_value, time_now)

    headers = { 'Authorization': httpSAS,
                'DataCollectorId': gateway_id,
                'PayloadType': 'Measurements',
                'Timestamp': time_now,
                'Cache-Control': 'no-cache',
                'Content-Length': len(sensor_data) }

    return(headers,sensor_data)

###############################################################################

# From APP IoT 
gateway_id = 'fffb8fc8-6eae-4368-86c2-6eb75c3ff015'

# APP IoT Mailbox URL for passing in sensor data.
url = 'https://eappiotsens.servicebus.windows.net/datacollectoroutbox/publishers/%s/messages' % (gateway_id)

# Sensor that we have defined in APP IoT.
sensors = { "Temperature":"d51d3b56-28e6-48a6-8992-95609d137760",
            "Is_Open":"6e01f16b-f7f7-4fd0-b0e7-3f6c796807ab",
            "Is_Tilted":"e3183f59-4eaa-4523-b0c1-f3b53d3d60a5" }

# Associate command-line inputs with target sensor.
sensor_inputs = { "Temperature":sys.argv[1], "Is_Open":sys.argv[2], "Is_Tilted":sys.argv[3] }

for sensor_name,sensor_id in sensors.iteritems():

    sensor_value = sensor_inputs[sensor_name]

    (header_data, sensor_data) = post_data(sensor_id, sensor_value, gateway_id) 

    try:
      response = requests.post(url, data=sensor_data, headers=header_data, proxies="")
    except requests.exceptions.Timeout as e:
        # Maybe set up for a retry, or continue in a retry loop
        print "ERROR: Time out exception thrown: %s" % (e)
        sys.exit(1)
    except requests.exceptions.TooManyRedirects as e:
        # Tell the user their URL was bad and try a different one
        print "ERROR: Too many re-directs exception thrown: %s" % (e)
        sys.exit(1)
    except requests.exceptions.HTTPError as e:
        print "ERROR: HTTPError exception thrown: %s" % (e)
        sys.exit(1)
    except requests.exceptions.RequestException as e:
        # catastrophic error. bail.
        print "ERROR: Requests exception thrown: %s" % (e)
        sys.exit(1)

    if str(response.status_code) != "201":
        print "Error: Post Response: "+ str(response.status_code)
        sys.exit(1)

    print "Posted %s: %s" % (sensor_name, sensor_data)
    print "Post Response Status: " + str(response.status_code)
